#!/usr/bin/env perl
use warnings;
use strict;
#
# quick commandline test tool
#

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use Compellent::Session;
use HC::Common;

my $option = {
    output => 'xml',
};
my @option_list = (
    "verbose|v+",
    "debug",
    "host=s",
    "username=s",
    "password=s",
    "no-check-certificate!",
    "output=s",
);

sub show_err {
    my ($session) = @_;

    print("Error: ",$session->errcode(),"\n");
    print("Msg: ",$session->errmsg(),"\n");
    exit(1);
}

sub main {
    HC::Common::do_options($option,@option_list);
    return if (defined($option->{help}));

    # required options
    foreach (qw(host username password)) {
        if (!defined($option->{$_})) {
            die("need $_ parameter\n");
        }
    }

    my $session = Compellent::Session->new();
    $session->set_baseurl("https://".$option->{host});
    $session->set_username($option->{username});
    $session->set_password($option->{password});

    if (defined($option->{'no-check-certificate'})) {
        $session->no_check_certificate();
    }

    my $err=$session->open();
    if (!defined($err)) {
        show_err($session);
    }

    if (!$ARGV[0]) { return; }
    my $cmd = shift @ARGV;

    if ($cmd eq 'table') {
        # A generic bulk get table / select row / extract command

        if (!$ARGV[0]) { return; }
        my $tablename = shift @ARGV;
        my $table = $session->table($tablename);
        if (!defined($table)) {
            show_err($session);
        }

        if ($option->{debug}) {
            print Dumper($table);
        }

        my $results;
        if (defined($ARGV[0])) {
            # search for a specific matching set from the data
            my $column = shift @ARGV;
            my $matchto = shift @ARGV;
            $results = $table->query($column=>$matchto);
        } else {
            $results = $table;
        }

        if (defined($ARGV[0])) {
            # extract a specific set of columns
            $results = $results->extract(@ARGV);
        }

        $results->print();
        print("\n");

    } elsif ($cmd eq 'repl_pitc') {
        # give a report on the date of the most recent PITC for each volume

        my $pitc   = $session->table('TYPE_PITC');
        my $volume = $session->table('TYPE_VOLUME');

        # select only the "frozen" entries
        $pitc = $pitc->query( State => 2 );

        # extract the last seen entry for each history number
        my $lastseen;
        $pitc->foreach(sub {
            my $f_history = ($_->field('History'))[0];
            if (!defined($lastseen->{$f_history})) {
                $lastseen->{$f_history} = $_;
                return;
            }

            my $f_index = ($_->field('Index'))[0];
            my $old_index = ($lastseen->{$f_history}->field('Index'))[0];
            if ($f_index > $old_index) {
                $lastseen->{$f_history} = $_;
                return;
            }
        });

        # rebuild the table with only the lastseen rows
        $pitc = HackDB->new();
        for my $row (values(%{$lastseen})) {
            $pitc->_add_row($row);
        }

        my $volume2name;
        $volume->foreach(sub {
            $volume2name->{($_->field('Index'))[0]} = ($_->field('Name'))[0]
        });

        # lookup the volume name and substitute it for the id
        $pitc->foreach(sub {
            my $index = ($_->field('CreateVolumeIndex'))[0];
            $_->_add_field('Name',$volume2name->{$index});
        });

        # extract just the columns that are interesting
        $pitc = $pitc->extract(qw(
            FreezeTime 
            CreateVolumeIndex
            OriginalCopyHistory OriginalSystemId
            History Index
            State
            CreateTime
            Name
        ));

        # print it out
        $pitc->print();
        print("\n");

    } else {
        # no known command, do a raw query
        if (!$ARGV[0]) { return; }
        my $xml = $session->_query($cmd,$ARGV[0]);
        if (!defined($xml)) {
            show_err($session);
        }

        if ($option->{output} eq 'xml') {
            $xml->set_pretty_print("indented_a");
            $xml->print;
        } elsif ($option->{output} eq 'csv') {
            print Compellent::Session::xml2csvtext($xml);
        }
    }
    
}
main();


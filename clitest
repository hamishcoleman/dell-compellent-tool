#!/usr/bin/env perl
use warnings;
use strict;
#
# quick commandline test tool
#

# TODO
# - blocksremaining
#       - ensure that volumes in state "sync done" are not counted
# - pitc report
#       - detect the time between changes in pitc number
#       - WARN if it has not changed for over threshold/2
#       - CRIT if it has not changed for over threshold
#

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use Compellent::Session;
use HC::CredentialStore;

use HC::Common;

my $option = {
    output => 'xml',
};
my @option_list = (
    "verbose|v+",
    "debug",
    "host=s",
    "username=s",
    "password=s",
    "no-check-certificate!",
    "output=s",
    "credfile=s",
);

sub show_err {
    my ($session) = @_;

    print("Error: ",$session->errcode(),"\n");
    print("Msg: ",$session->errmsg(),"\n");
    exit(1);
}

sub main {
    HC::Common::do_options($option,@option_list);
    return if (defined($option->{help}));

    my ($username,$password);
    if (defined($option->{credfile})) {
        my $cred = CredentialStore->new($option->{credfile});
        die("credfile error") if (!defined($cred));

        ($username,$password) = $cred->lookup($option->{host});
    }

    if (defined($option->{username})) {$username = $option->{username};}
    if (defined($option->{password})) {$password = $option->{password};}

    # required options
    die("need host parameter\n") if (!defined($option->{host}));
    die("need username parameter\n") if (!defined($username));
    die("need password parameter\n") if (!defined($password));

    my $session = Compellent::Session->new();
    $session->set_baseurl("https://".$option->{host});
    $session->set_username($username);
    $session->set_password($password);

    if (defined($option->{'no-check-certificate'})) {
        $session->no_check_certificate();
    }

    if (!$ARGV[0]) { return; }
    my $cmd = shift @ARGV;

    if ($cmd eq 'table') {
        # A generic bulk get table / select row / extract command

        if (!$ARGV[0]) { return; }
        my $tablename = shift @ARGV;
        my $table = $session->table($tablename);
        if (!defined($table)) {
            show_err($session);
        }

        if ($option->{debug}) {
            print Dumper($table);
        }

        my $results;
        if (defined($ARGV[0])) {
            # search for a specific matching set from the data
            my $column = shift @ARGV;
            my $matchto = shift @ARGV;
            $results = $table->query($column=>$matchto);
        } else {
            $results = $table;
        }

        if (defined($ARGV[0])) {
            # extract a specific set of columns
            $results = $results->extract(@ARGV);
        }

        $results->print();
        print("\n");

    } elsif ($cmd eq 'repl_blocksremaining') {
        # output the total of the table CMS BlocksRemaining column

        my $table_cms = $session->table('TYPE_CMS');

        if (!defined($table_cms)) {
            print("No Copy/Mirror/Swap table!?\n");
            return undef; # TODO - return an errorcode
        }

        my $blocksremaining = 0;
        $table_cms->foreach(sub {
            $blocksremaining+=$_->field('BlocksRemaining');
        });

        print $blocksremaining,"\n";

    } elsif ($cmd eq 'repl_stateok') {
        #TODO

        # want a report that says that replication is not paused, is
        # not missing and a couple of other things

        my $table_cms = $session->table('TYPE_CMS');

        if (!defined($table_cms)) {
            print("No Copy/Mirror/Swap table!?\n");
            return undef; # TODO - return an errorcode
        }

        my $table_cms_filter = HackDB->new();
        $table_cms->foreach(sub {
            my $state = $_->field('State');
            return if ($state == 6); # 6 = running == ok
            return if ($state == 10); # 10 = synced == ok
            # 11 = completed == ok?

            # all others == error?
            $table_cms_filter->_add_row($_);

        });

        # TODO - a nagios output mode
        $table_cms_filter->print(); # output an empty list if no errors seen

    } elsif ($cmd eq 'repl_missing') {
        # give a report on which volumes do not have replication setup
        #
        # "replication setup" is defined as showing up as either the source
        # or dest volume in the copy/mirror/swap table

        my $table_cms = $session->table('TYPE_CMS');

        if (!defined($table_cms)) {
            print("No Copy/Mirror/Swap table!?\n");
            return undef; # TODO - return an errorcode
        }

        my $table_volume = $session->table('TYPE_VOLUME');

        $table_volume->foreach(sub {
            my $vol = $_;
            my $index = $vol->field('Index');
            my $name = $vol->field('Name');

            my $src = $table_cms->query( SourceVolume => $index );
            die("ASSERT") if ($src->_row_count()>1);
            if ($src->_row_count()==1) {
                $vol->_add_field('_REPL','SRC');
                return;
            }

            my $dst = $table_cms->query( DestVolume => $index );
            die("ASSERT") if ($dst->_row_count()>1);
            if ($dst->_row_count()==1) {
                $vol->_add_field('_REPL','DST');
                return;
            }

            # neither a source nor a dest matched..
            $vol->_add_field('_REPL','NONE');
        });

        # TODO - allow loading an exceptions list

        # TODO - allow skipping the query to get a full report
        $table_volume = $table_volume->query( _REPL => 'NONE' );

        $table_volume = $table_volume->extract(qw(
            Index
            Name
            _REPL
        ));

        # TODO - have a nagios output mode
        $table_volume->print();

    } elsif ($cmd eq 'repl_pitc') {
        # give a report on the date of the most recent PITC for each volume

        my $pitc   = $session->table('TYPE_PITC');
        my $volume = $session->table('TYPE_VOLUME');

        # select only the "frozen" entries
        $pitc = $pitc->query( State => 2 );

        # extract the last seen entry for each history number
        my $lastseen;
        $pitc->foreach(sub {
            my $f_history = $_->field('History');
            if (!defined($lastseen->{$f_history})) {
                $lastseen->{$f_history} = $_;
                return;
            }

            my $f_index = $_->field('Index');
            my $old_index = $lastseen->{$f_history}->field('Index');
            if ($f_index > $old_index) {
                $lastseen->{$f_history} = $_;
                return;
            }
        });

        # rebuild the table with only the lastseen rows
        $pitc = HackDB->new();
        for my $row (values(%{$lastseen})) {
            $pitc->_add_row($row);
        }

        my $volume2name;
        $volume->foreach(sub {
            $volume2name->{$_->field('Index')} = $_->field('Name')
        });

        # lookup the volume name and substitute it for the id
        $pitc->foreach(sub {
            my $index = $_->field('CreateVolumeIndex');
            $_->_add_field('Name',$volume2name->{$index});
        });

        # extract just the columns that are interesting
        $pitc = $pitc->extract(qw(
            FreezeTime
            CreateTime
            CreateVolumeIndex
            History
            OriginalCopyHistory OriginalSystemId
            Index
            State
            Name
        ));

        # print it out
        $pitc->print();
        print("\n");

    } else {
        # no known command, do a raw query
        if (!$ARGV[0]) { return; }
        my $xml = $session->_query($cmd,$ARGV[0]);
        if (!defined($xml)) {
            show_err($session);
        }

        if ($option->{output} eq 'xml') {
            $xml->set_pretty_print("indented_a");
            $xml->print;
        } elsif ($option->{output} eq 'csv') {
            print Compellent::Session::xml2csvtext($xml);
        }
    }

}
main();


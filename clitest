#!/usr/bin/env perl
use warnings;
use strict;
#
# quick commandline test tool
#

# allow the libs to be in the bin dir
use FindBin;
use lib "$FindBin::RealBin/lib";
use lib "/home/hamish/s/bin/lib";

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use Compellent::Session;
use HC::Common;

my $option = {
    output => 'xml',
};
my @option_list = (
    "verbose|v+",
    "debug",
    "host=s",
    "username=s",
    "password=s",
    "no-check-certificate!",
    "output=s",
);

sub show_err {
    my ($session) = @_;

    print("Error: ",$session->errcode(),"\n");
    print("Msg: ",$session->errmsg(),"\n");
    exit(1);
}

sub main {
    HC::Common::do_options($option,@option_list);
    return if (defined($option->{help}));

    # required options
    foreach (qw(host username password)) {
        if (!defined($option->{$_})) {
            die("need $_ parameter\n");
        }
    }

    my $session = Compellent::Session->new();
    $session->set_baseurl("https://".$option->{host});
    $session->set_username($option->{username});
    $session->set_password($option->{password});

    if (defined($option->{'no-check-certificate'})) {
        $session->no_check_certificate();
    }

    my $err=$session->open();
    if (!defined($err)) {
        show_err($session);
    }

    if (!$ARGV[0]) { return; }

    my $xml = $session->_query($ARGV[0],$ARGV[1]);
    if (!defined($xml)) {
        show_err($session);
    }

    if ($option->{output} eq 'xml') {
        $xml->set_pretty_print("indented_a");
        $xml->print;
    } elsif ($option->{output} eq 'csv') {
        print Compellent::Session::xml2csvtext($xml);
    } elsif ($option->{output} eq 'hackdb') {
        # quick exercise of the hackdb functions:

        my $hackdb = Compellent::Session::xml2hackdb($xml);
        #print Dumper($hackdb);

        my $row = $hackdb->row(1);
        print Dumper($row);
        print join(',',$row->field('UserLogin','UserRealName')),"\n";

        my $results = $hackdb->query(UserLogin=>'ops');
        $results->foreach(sub {
            print join(',',$_->field('UserLogin','UserRealName')),"\n";
        });
    }
    
}
main();

